' /**
'  * @module mLog
'  * @description implementation of mLog node
'  */

function Init() as void
  m.top.transports = []
  m.top.includeFilters = {}
  m.top.excludeFilters = {}
  m.top.observeField("transportTypes", "log_onTransportsChange")
  m.top.transportTypes = ["log_PrintTransport"]

end function

function onTransportsChange(event)
  for each transport in m.transports
    parent = transport.getParent()
    if parent <> invalid
      parent.removeChild(transport)
    end if
  end for

  transports = []
  isPrinting = false

  for each transportType in m.top.transportTypes
    if transportType = "log_PrintTransport"
      isPrinting = true
    else
      transport = m.top.getScene().createChild(transportType)
      if transport <> invalid
        transports.push(transport)
      else
        print "ERROR - could not create Log transport with type " ; transportType
      end if
    end if
  end for

  m.top.transports = transports

  if m.top.transports.count() > 0
    if isPrinting
      m.top.logMode = 3
    else
      m.top.logMode = 2
    end if
  else if isPrinting
    m.top.logMode = 1
  else 
    m.top.logMode = 0
  end if
end function
